AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'adds a dead letter queue to lambda functions that need it'

Parameters:
  TopicName:
    Type: String
    Default: lambda-default-dlq
    Description: Choose one in the same region and account
  IntervalHours:
    Type: Number
    Description: from once every 6 hours to once a week
    Default: 24
  Role:
    Type: String

Resources:
  Dlq:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref TopicName

  Fn:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: !Sub |
        import boto3

        def handler(event, context):
          print('event', event)

          client = boto3.client('lambda')
          params = {}
          all_functions = []
          while True:
            response = client.list_functions(**params)
            all_functions.extend(response.get('Functions', []))
            if 'NextMarker' not in response:
              break
            print('paginating')
            params['Marker'] = response['NextMarker']

          errors = []
          for fn in all_functions:
            name = fn['FunctionName']
            if 'TargetArn' in fn.get('DeadLetterConfig', {}):
              print(f'{name} already has a DLQ, skipping.')
              continue
            try:
              result = client.update_function_configuration(FunctionName=name, DeadLetterConfig={'TargetArn': '${Dlq}'})
            except Exception as e:
              errors.append(name)
          if errors:
            errors = sorted(errors)
            result = boto3.client('sns').publish(TopicArn='${Dlq}', Message=f"Functions that don't have sns:Publish permission on topic ${Dlq.TopicName}: {', '.join(errors)}\n\nThey need this permission before a DLQ can be attached to them.")
            print(result)
          return errors
      Handler: index.handler
      Runtime: python3.7
      Timeout: 300
      MemorySize: 128
      Role: !Ref Role
      Events:
        Cw:
          Type: Schedule
          Properties:
            Schedule: !Sub rate(${IntervalHours} hours)
